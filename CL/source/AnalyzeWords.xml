<?xml version="1.0" encoding="UTF-8"?>
<article version="5.2" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xila="http://www.w3.org/2001/XInclude/local-attributes"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:trans="http://docbook.org/ns/transclusion"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Analyzing Words</title>

    <!-- <author>
      <personname><firstname>Rochelle</firstname><surname>Fisher</surname></personname>
    </author> -->

    <!-- <pubdate>19 June 2025</pubdate> -->
  </info>

 <section><title>Work the Next Words</title>
 <para>You will analyze how your dictionary words are used in your aggregated sample. We will begin with the top words. Then we will go through
 the words that are used one time only.</para>
 <procedure>
	<title>To analyze words:</title>
	<step>Open your aggregated document that you used as input for the Python script.</step>
	<step>Search for the word to analyze. We like to use Notepad++, to get all the results in a list, each result with context.</step>
	<step>From the context:
		<itemizedlist>
			<listitem>See if the word is used in more than one part of speech. If it is, and it is not obvious which is the most common, count the instances of each PoS.
			<para>I usually paste or import the results in a spreadsheet and then use COUNTIF, filter, or pivot table.</para>
			</listitem>
			<listitem>See if the word is used with more than one defintion. If it is, note the defitions. Use counts, industry standards, and internet searches to get the best defintion.
			<para>Get the ASD-STE 100 document and see what their dictionary says about the word. NGRAM is also a good tool.</para>
			<para><imagedata fileref="images/ngram.png" /></para>
			</listitem>
	
		
		</itemizedlist>
	</step>
	<step>Enter a draft definition. See if the definition always works. If you decide to make the word not allowed, see if the chosen alternate word or syntax works in a random selection of sentences.  </step>
	<step>Update the rules, definition, PoS. Enter good and bad examples.</step>
	<step>If not allowed, make sure the words you set as alternatives are allowed and configured in the dictionary for PoS and definition, with examples.</step>
 </procedure>
 
 
 </section>
 <section>
	<title>Examples of Word Analysis</title>
	<para>Let's start with <wordasword>organizational</wordasword>.</para>
	<procedure>
		<title>To set <wordasword>organizational</wordasword> as a word in our CL:</title>
		<step>Open the file with all your textual content. We named this file <filename>sampleAgg.txt</filename>.</step>
		<step>Search for <wordasword>organizational</wordasword>.
			<para>We found this:</para>
			<blockquote>Produce intelligence that will be embedded into organizational workflows and would serve decision-makers.<footnote><para>This sentence belongs to one of the organizations from which we used samples.  </para></footnote></blockquote>
			
		</step>
		<step>Analyzing the use of <wordasword>organizational</wordasword>, we see ambiguity. Does the author mean that the workflows are organized? That they are for the organization? That there are
		different workflows for different groups in the hierarchy?
		<para>If we remove the word, it does not change the meaning, as far as we can see. We decide that this word is not allowed. If we 
		had access to the SME, we would discuss their meaning and find alternatives. 
		</para>
		
		<para>Suggestion: You have access to your SMEs. Set your CL words as best as you can. Then, discuss multiple words with similar issues. Edit your CL for alternative words and other decisions.</para>
		</step>
	</procedure>
	<para>Our next task is to work through the top words that are not obviously allowed or not allowed. Sort the dictionary by <guilabel>Count</guilabel>.
	</para>
	<para>Our first word to work through is <wordasword>event</wordasword>.
	</para>
	<procedure>
		<title>Analyzing <wordasword>event</wordasword>:</title>
		
		<step>In Notepad++, we search for <wordasword>event</wordasword> in the aggregated text. We get 1417 results, for <wordasword>event</wordasword> and <wordasword>events</wordasword>. As we read the results, 
		we make the defintion draft:<para>a security incident detected on the secured network</para></step>
		<step>The fifth result is for a procedure to create an event in the security application. We fix our defintion from more samples to include threat intelligence data and usage:  
		<blockquote>object that contains a cybersecurity incident, report, or finding, with attributes, identifiers, and other data for analysis, prevention, and mitigation</blockquote>
		
		</step>
		<step>We see that <wordasword>event</wordasword> is used with other definitions.
			<itemizedlist>
				<listitem>A system or user action
					<para>This is a technical name for a specfic product. For our general cybersecurity dictionary, it does not fit. 
				We can communicate actions in errors and logs with their names, without the use of <wordasword>event</wordasword>.</para>
				</listitem>
				<listitem>A phrase: "in the event this happens"
					<para>This is a verbose phrase to mean <wordasword>if</wordasword>.</para>
				</listitem>
				<listitem>CLI or API commands and pathnames. Our checker tool must ignore code, filenames, and pathnames.
					<note>This is an advantage of an XML technical writing tool. We can use 
		elements that set content by type: &lt;code&gt;, &lt;codeblock&gt;, &lt;filename&gt;, &lt;pathname&gt;, and similar. We can then set the checker tool to ignore text in these elements. 
		We add a rule to our style guide to use these elements.
					</note>
				</listitem>
			</itemizedlist>
		</step>
		<step>We sort the dictionary by <guilabel>Word</guilabel>, to configure all similar words (plural with singular, commands, and so on).</step>
		<step>In <wordasword>event</wordasword>, we enter the definition, good example, and bad example. In <wordasword>events</wordasword>, we enter: <literal>plural of event</literal>.
			<para>A non-AI checker tool (and even some AI tools) cannot see the difference of meanings in the use of <wordasword>event</wordasword> with our specific definition or the use of the non-allowed defintion.
	In <guilabel>Rule</guilabel>, we enter: <literal>Do not use to mean action of a user or server</literal>. Our checker tool will show rules to help writers be consistent.
			</para>
		</step>
		<step>For the words that start with <wordasword>event</wordasword> and are obviously commands or pathnames, 
		we set the <guilabel>PoS</guilabel> to <literal>command</literal> and <guilabel>Allowed</guilabel> to <literal>T</literal>.
		<para><imagedata fileref="images/words_event.png" /></para>
		</step>
		<step>In the dictionary, we add a row: <literal>in the event</literal>. 
			<para><guilabel>Word</guilabel> = in the event</para>
			<para><guilabel>Count</guilabel> = added</para>
			<para><guilabel>PoS</guilabel> = phrase</para>
			<para><guilabel>Good Example</guilabel> = If X happens</para>
			<para><guilabel>Bad Example</guilabel> = In the event this happens</para>
			<para><guilabel>Allowed</guilabel> = F</para>
			<para><guilabel>Audience</guilabel> = all</para>
			<para><guilabel>Alt1</guilabel> = IF</para>
		</step>
		<step>We must make sure that <wordasword>if</wordasword> is set to <guilabel>Allowed</guilabel> = <wordasword>T</wordasword>.
			Search for <wordasword>if</wordasword> in the dictionary and set its values. If not in the dictionary, add it now.
			<para><guilabel>Word</guilabel> = if</para>
			<para><guilabel>Count</guilabel> = added</para>
			<para><guilabel>PoS</guilabel> = conjuction</para>
			<para><guilabel>Definition</guilabel> = introduces condition</para>
			<para><guilabel>Allowed</guilabel> = T</para>
			<para><guilabel>Audience</guilabel> = all</para>
		</step>
	</procedure>
	<procedure>
		<title>Analyzing <wordasword>type</wordasword>:</title>
		<para>This word is an excellent example. It is used in different parts of speech with different definitions in writing and native speaking. To control our written language,
		we must restrict this word to one PoS and one definition. Or we can decide to set it to not allowed, to be replaced with specific words.</para>
		<step>Search for <wordasword>type</wordasword> in the aggregated text.</step>
		<step>Skim the hits with context. If it is not clear which PoS is mostly used, enter the PoS of each row. We found that it was most often used as a noun or technical name, but there were sentences with it used as a verb.
			<para><imagedata fileref="images/words_type01.png" /></para>
		</step>
		<step>Add a row for <wordasword>type</wordasword> as a verb and set it to not allowed.
			<para><guilabel>Word</guilabel> = type</para>
			<para><guilabel>Count</guilabel> = added</para>
			<para><guilabel>PoS</guilabel> = verb</para>
			<para><guilabel>Good example</guilabel> = enter yes</para>
			<para><guilabel>Bad example</guilabel> = type yes</para>
			<para><guilabel>Allowed</guilabel> = F</para>
			<para><guilabel>Audience</guilabel> = all</para>
			<para><guilabel>ALT1</guilabel> = ENTER</para>
			<para><guilabel>Rule</guilabel> = do not use as a verb</para>
		</step>
		<step>Make sure <wordasword>enter</wordasword> is allowed.
	
			<para><guilabel>Word</guilabel> = enter</para>
			<para><guilabel>PoS</guilabel> = verb</para>
			<para><guilabel>Definition</guilabel> = input values</para>
			<para><guilabel>Good example</guilabel> = enter yes</para>
			<para><guilabel>Bad example</guilabel> = type yes</para>
			<para><guilabel>Allowed</guilabel> = T</para>
			<para><guilabel>Audience</guilabel> = all</para></step>
		<step>We see that there many uses of <wordasword>type</wordasword> in the GUI and CLI. As a technical name for user interface (UX) creators, we must allow it. In the original row for <wordasword>type</wordasword>,
		set it to allowed for UX.
			<para><guilabel>Word</guilabel> = type</para>
			<para><guilabel>PoS</guilabel> = name</para>
			<para><guilabel>Definition</guilabel> = representation of group of objects with common characteristics</para>
			<para><guilabel>Allowed</guilabel> = T</para>
			<para><guilabel>Audience</guilabel> = UX</para>
		</step>
		<step>Create a style guide rule that all text on the interface (GUI, API, or CLI) must be wrapped in an element, such as &lt;code&gt;, &lt;codeblock&gt;, &lt;guilable&gt;. We can then set the checker tool to ignore text in these elements.</step>
		<step>Decide to rewrite sentences that use <wordasword>type</wordasword> as a noun. Test this on random sentences. If it works, create rows to not allow the noun.
			<para><imagedata fileref="images/words_type02.png" /></para>
		</step>
	
	</procedure>
	</section>
</article>