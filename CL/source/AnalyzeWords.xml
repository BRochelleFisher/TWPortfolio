<?xml version="1.0" encoding="UTF-8"?>
<article version="5.2" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xila="http://www.w3.org/2001/XInclude/local-attributes"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:trans="http://docbook.org/ns/transclusion"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Analyzing Words</title>

    <!-- <author>
      <personname><firstname>Rochelle</firstname><surname>Fisher</surname></personname>
    </author> -->

    <!-- <pubdate>7 July 2025</pubdate> -->
  </info>

 <section><title>Work the Next Words</title>
 <para>You will analyze how your dictionary words are used in your sample.  </para>
 <procedure>
	<title>To analyze words:</title>
 	<step><para>If you have a file created by the Context script, open it. It shows your words with 5 words before and after it, to see context.</para>
 	<para>If you do not have that file and do not want to create it:</para>
 		<substeps>
 			<step><para>Open your aggregated sample document that you used as input for the Python script.</para></step>
 			<step><para>Search for the word to analyze. We like to use Notepad++, to get all the results in a list, each result with context.</para></step>
 		</substeps>
 	</step>
	
	<step><para>From the context, see if the word is used in more than one part of speech. If it is, and it is not obvious which is the most common, count the instances of each PoS.
	</para><para>I usually paste or import the results in a spreadsheet and then use COUNTIF, filter, or pivot table.</para></step>
	<step><para>See if the word, in the allowed PoS, is used with more than one definition. If it is, note the definitions. 
			</para><para>Use counts, industry standards, and internet searches to get the best definition. Get the ASD-STE 100 document and see what their dictionary says about the word. NGRAM is also a good tool.</para>
		<para><mediaobject><imageobject><imagedata fileref="images/ngram.png" /></imageobject></mediaobject></para>
	</step>
	<step><para>See if the draft definition works in a large random sample, or in all uses. If you decide to make the word not allowed, 
			see if the chosen alternate word or syntax works.  </para>
		<para>Best Practice: When you write a definition, do not use the word in it. This will help you find words used as synonyms, which 
		is not what we want. In a CL, not only does each word have one definition, but each definition is represented by one word.</para>
		<para>For example, your documentation uses the past participles (past tense verb that functions as an adjective)
			<wordasword>protected</wordasword> and <wordasword>secured</wordasword> to mean the same thing. When you define them, the
			definition is <literal>endpoint on which Product services run or network on which Product services run on all endpoints</literal>. 
			You decide that works for <wordasword>protected</wordasword>,
			but when you get to <wordasword>secured</wordasword>, you change the definition to be: <literal>endpoint on which remediation ran 
			to solve security vulnerability or exploit</literal>. With these specific definitions, you can use both words, each with more meaning for the user. 
		</para>
		<para>You may find that two or more words are used for the same definition and PoS, and you can restrict your dictionary
		to only one. This will make it easier for users to read and to follow the instructions. For example, if you use <wordasword>configure</wordasword> 
		to mean <wordasword>enter</wordasword>, you could confuse your users when the docs say, <literal>configure the IP address</literal>. What is
		there to configure? Is it not enough to simply enter the IP address? Can you remove <wordasword>configure</wordasword> and use <wordasword>create</wordasword>, 
		<wordasword>enter</wordasword>, and other more specific words for the action?</para>
	</step>
	<step><para>Update the rules, definition, and PoS. Enter good and bad examples.</para>
	<para>Best practice: You do not need a bad example for allowed words. It is best to use it for words that are not allowed. See ASD-STE 100 for examples.</para>
	</step>
	<step><para>If not allowed, make sure the words you set as alternatives are allowed and configured in the dictionary for PoS and definition, with examples.</para></step>
 </procedure>
 
 
 </section>
 <section>
	<title>Examples of Word Analysis</title>
	<para>Let's start with <wordasword>organizational</wordasword>.</para>
	<procedure>
		<title>To set <wordasword>organizational</wordasword> as a word in our CL:</title>
		<step><para>Open the file with all your textual content. We named this file <filename>sampleAgg.txt</filename>.</para></step>
		<step><para>Search for <wordasword>organizational</wordasword>.</para>
			<para>We found this sentence (owned by one of the organizations from which we used samples):</para>
			<blockquote><para>Produce intelligence that will be embedded into organizational workflows and would serve decision-makers.</para></blockquote>
		</step>
		<step><para>Analyzing the use of <wordasword>organizational</wordasword>, 
				we see ambiguity. Does the author mean that the workflows are organized? That they are for the organization? That there are
				different workflows for different groups in the hierarchy?</para>
		<para>If we remove the word, it does not change the meaning, as far as we can see. We decide that this word is not allowed. If we 
		had access to the SME, we would discuss their meaning and find alternatives. 
		</para>
		<para>Suggestion: You have access to your SMEs. Set your CL words as best as you can. Then, discuss multiple words with similar issues. 
			Edit your CL for alternative words and other decisions.</para>
		</step>
	</procedure>
	<para>The next task is to work through the top words that are not obviously allowed or not allowed. Sort the dictionary by <guilabel>Count</guilabel>.
	</para>
	<para>Our next word to work through is <wordasword>event</wordasword>.
	</para>
	<procedure>
		<title>Analyzing <wordasword>event</wordasword>:</title>
		
		<step><para>Search for <wordasword>event</wordasword> in the sample content or context file. </para>
			<para>Our sample has 1417 results, for <wordasword>event</wordasword> and <wordasword>events</wordasword>.</para>
		</step>
		<step><para>Read the results. Make the definition draft. For example: </para>
				<para><literal>a security incident detected on the secured network</literal></para></step>
		<step><para>Fix the definition as you read more result lines.</para>
			<para>For example: The fifth result is for a procedure to create an event in the security application. We learn that an event always includes
		threat intelligence data and usage. We update the definition to:</para>
			<blockquote><para>object that contains a cybersecurity incident, report, or finding, 
					with attributes, identifiers, and other data for analysis, prevention, and mitigation</para></blockquote>
		<para>We see that <wordasword>event</wordasword> is used with other definitions.</para>
			<itemizedlist>
				<listitem><para>A system or user action</para>
					<para>This is a technical name for a specific product. For our general cybersecurity dictionary, it does not fit. 
				We can communicate actions in errors and logs with their names, without the use of <wordasword>event</wordasword>.</para>
				</listitem>
				<listitem><para>A phrase: "in the event this happens"</para>
					<para>This is a verbose phrase to mean <wordasword>if</wordasword>.</para>
				</listitem>
				<listitem><para>CLI or API commands and pathnames. Our checker tool must ignore code, filenames, and pathnames.</para>
					<para>This is an advantage of an XML technical writing tool. We can use 
		elements that set content by type: &lt;code&gt;, &lt;codeblock&gt;, &lt;filename&gt;, &lt;pathname&gt;, and similar. We can then set the checker tool to ignore text in these elements. 
		We add a rule to our style guide to use these elements.
					</para>
				</listitem>
			</itemizedlist>
		</step>
		<step><para>Sort the dictionary by <guilabel>Word</guilabel>, to configure all similar words (plural with singular, commands, and so on).</para></step>
		<step><para>In <wordasword>event</wordasword>, we enter the definition, good example, and bad example. In <wordasword>events</wordasword>, enter: <literal>plural of event</literal>.</para></step>
		<step><para>A non-AI checker tool (and even some AI tools) cannot see the difference of meanings in the use of 
				<wordasword>event</wordasword> with our specific definition or the use of the non-allowed definition.
				In <guilabel>Rule</guilabel>, enter: <literal>Do not use to mean action of a user or server</literal>. </para>
			<para>Our checker tool will show rules to help writers be consistent.
			</para>
	</step>
		<step><para>For the words that start with <wordasword>event</wordasword> and are obviously commands or pathnames, 
		set the <guilabel>PoS</guilabel> to <literal>command</literal> and <guilabel>Allowed</guilabel> to <literal>T</literal>.</para>
		<para>
			Add a row for the NOT allowed phrase <literal>in the event</literal> and make sure <wordasword>if</wordasword> is allowed.
			
		</para></step>
	
			
		
	</procedure>
 	<para>In this table, we don't show <guilabel>Audience</guilabel> (<literal>all</literal> for each row) or 
 		<guilabel>Allowed?</guilabel> (<literal>T</literal> for each row)</para>
 	<table>
 		<title>Dictionary Rows for <wordasword>event</wordasword></title>
 		<tgroup cols="4">
 			<thead>
 				<row>
 					<entry>Word</entry>
 					
 					<entry>Definition</entry>
 					<entry>PoS</entry>
 					
 					<entry>Rule / ALT1</entry>
 				
 				</row>
 			</thead>
 			<tbody>
 				<row>
 					<entry>event</entry>
 					<!--<entry>689</entry>-->
 					<entry>object that contains a cybersecurity incident, report, or finding, with attributes, identifiers, and other data for analysis, prevention, and mitigation</entry>
 					<entry>noun</entry>
 					<!--<entry>Store incidents as a database of events</entry>
 					<entry>This allows a failure event </entry>
 					<entry>T</entry>
 					<entry>all</entry>-->
 					<entry>Do not use to mean action of a user or server</entry>
 					
 				</row>
 				<row>
 					<entry>events</entry>
 					<!--<entry>523</entry>-->
 					<entry>plural of EVENT</entry>
 					<entry>noun</entry>
 					<!--<entry></entry>
 					<entry></entry>
 					<entry>T</entry>
 					<entry>all</entry>-->
 					<entry>Do not use to mean action of a user or server</entry>
 				
 				</row>
 				<row>
 					<entry>eventblocklists</entry>
 				<!--	<entry>5</entry>-->
 					<entry></entry>
 					<entry>command</entry>
 					<entry></entry>
 					<!--<entry></entry>
 					<entry>T</entry>
 					<entry>all</entry>
 					<entry></entry>
 					<entry></entry>-->
 				</row>
 				<row>
 					<entry>eventgraph</entry>
 					<!--<entry>3</entry>-->
 					<entry></entry>
 					<entry>command</entry>
 				<entry></entry>
 					<!--	<entry></entry>
 					<entry>T</entry>
 					<entry>all</entry>
 					<entry></entry><entry></entry>-->
 				</row>
 				<row>
 					<entry>eventid</entry>
 					<!--<entry>27</entry>-->
 					<entry></entry>
 					<entry>command</entry>
 					<entry></entry>
 					<!--<entry></entry>
 					<entry>T</entry>
 					<entry>all</entry>
 					<entry></entry><entry></entry>-->
 				</row>
 				<row>
 					<entry>eventinfo</entry>
 					<!--<entry>1</entry>-->
 					<entry></entry>
 					<entry>command</entry>
 					<entry></entry>
 					<!--<entry></entry>
 					<entry>T</entry>
 					<entry>all</entry>
 					<entry></entry><entry></entry>-->
 				</row>
 				<row>
 					<entry>eventreports</entry>
 					<!--<entry>13</entry>-->
 					<entry></entry>
 					<entry>command</entry>
 					<entry></entry>
 					<!--<entry></entry>
 					<entry>T</entry>
 					<entry>all</entry>
 					<entry></entry><entry></entry>-->
 				</row>
 				<row>
 					<entry>eventtag</entry>
 					<!--<entry>1</entry>-->
 					<entry></entry>
 					<entry>command</entry>
 					<entry></entry>
 					<!--<entry></entry>
 					<entry>T</entry>
 					<entry>all</entry>
 					<entry></entry><entry></entry>-->
 				</row>
 			</tbody></tgroup>
 	</table>
 	<table>
 		<title>Dictionary Rows to Replace <wordasword>in the event</wordasword></title>
 		<tgroup cols="6">
 			<thead>
 				<row>
 					<entry>Word</entry>
 					<entry>Count</entry>
 					<entry>Definition</entry>
 					<entry>PoS</entry>
 					<entry>Allowed?</entry>
 					<entry>Rule / ALT1</entry>
 					
 				</row>
 			</thead>
 			<tbody>
 				<row>
 					<entry>in the event</entry>
 					<entry>172</entry>
 					<entry></entry>
 					<entry>phrase</entry>
 					
 					<entry>F</entry>
 					
 					<entry>IF</entry>
 				</row>
 				<row>
 					<entry>if</entry>
 					<entry>added</entry>
 					<entry>introduces condition</entry>
 					<entry>conjunction</entry>
 					
 					<entry>T</entry>
 					
 					<entry>Separate the condition from the action or result with a comma</entry>
 					
 				</row>
 			</tbody></tgroup>
 	</table>
	<procedure>
		<title>Analyzing <wordasword>type</wordasword>:</title>
		<para>This word is an excellent example. It is used in different parts of speech with different definitions in writing and native speaking. To control our written language,
		we must restrict this word to one PoS and one definition. Or we can decide to set it to not allowed, to be replaced with specific words.</para>
		<step><para>Search for <wordasword>type</wordasword> in the sample.</para></step>
		<step><para>Skim the hits with context. If it is not clear which PoS is mostly used, enter the PoS of each row. We found that it was most often used as a noun or technical name, but there were sentences with it used as a verb.</para>
			<para>
				<mediaobject>
					<imageobject>
						<imagedata fileref="images/words_type01.png" />
					</imageobject>
				</mediaobject>
				
			</para>
		</step>
		<step><para>Add a row for <wordasword>type</wordasword> as a verb and set it to not allowed.</para>
			<table>
				<title>Dictionary Rows for <wordasword>type</wordasword> as a verb</title>
				<tgroup cols="10">
					<thead>
						<row>
							<entry>Word</entry>
							<entry>Count</entry>
							<entry>Definition</entry>
							<entry>PoS</entry>
							<entry>Good Example</entry>
							<entry>Bad Example</entry>
							<entry>Allowed?</entry>
							<entry>Audience</entry>
							<entry>Rule</entry>
							<entry>ALT1</entry>
						</row>
					</thead>
					<tbody>
						
						<row>
							<entry>type</entry>
							<entry>added</entry>
							<entry>1) to categorize; 2) to enter input with a keyboard</entry>
							<entry>verb</entry>
							<entry>enter yes</entry>
							<entry>type yes</entry>
							<entry>F</entry>
							<entry>all</entry>
							<entry>Do not use as a verb</entry>
							<entry>ENTER</entry>
						</row>
					</tbody></tgroup>
			</table>
		</step>
		<step><para>Make sure <wordasword>enter</wordasword> is allowed.</para>
			<table>
				<title>Dictionary Rows for <wordasword>enter</wordasword></title>
				<tgroup cols="8">
					<thead>
						<row>
							<entry>Word</entry>
							<entry>Count</entry>
							<entry>Definition</entry>
							<entry>PoS</entry>
							<entry>Good Example</entry>
							<entry>Bad Example</entry>
							<entry>Allowed?</entry>
							<entry>Audience</entry>
							
						</row>
					</thead>
					<tbody>
						
						<row>
							<entry>enter</entry>
							<entry>added</entry>
							<entry>to input values</entry>
							<entry>verb</entry>
							<entry>enter yes</entry>
							<entry></entry>
							<entry>T</entry>
							<entry>all</entry>
						</row>
					</tbody></tgroup>
			</table>
		</step>
		<step><para>We see that there many uses of <wordasword>type</wordasword> in the GUI and CLI. We could try to make it a technical name for user interface (UX) creators. The word <wordasword>type</wordasword> would be allowed in
				micro-copy and coding but not in technical writing. We would add a row for the UX persona in audience that would be Allowed for <wordasword>type</wordasword> as
				a <literal>Name</literal>. We would add another row for the other audiences that makes use of <wordasword>type</wordasword> as a noun not allowed.
		</para> 
			
			<para>But we see in the results that <wordasword>type</wordasword> is used in text that cannot easily be rewritten. We must allow it for everyone, but only with the required definition, as an object in the product.</para>
			
			<table>
				<title>Dictionary Rows for <wordasword>type</wordasword> as a noun</title>
				<tgroup cols="9">
					<thead>
						<row>
							<entry>Word</entry>
							<entry>Count</entry>
							<entry>Definition</entry>
							<entry>PoS</entry>
							<entry>Good Example</entry>
							<entry>Bad Example</entry>
							<entry>Allowed?</entry>
							<entry>Audience</entry>
							<entry>Rule</entry>
							
						</row>
					</thead>
					<tbody>
						
						<row>
							<entry>type</entry>
							<entry>added</entry>
							<entry>product group of objects with common characteristics</entry>
							<entry>Name</entry>
							<entry>some attribute types require associated events</entry>
							<entry>some types of attributes are more complex</entry>
							<entry>T</entry>
							<entry>all</entry>
							<entry>Do not use as general "kind"; use only as a category specific to the product</entry>
						</row>
					</tbody></tgroup>
			</table>
			
		</step>
		<step><para>Make sure the style guide rule that all text on the interface (GUI, API, or CLI) must be wrapped in an element, such as &lt;code&gt;, &lt;codeblock&gt;, &lt;guilabel&gt;. 
		We can then set the checker tool to ignore text in these elements. 
		If your checker tool shows the rules, it will not show this rule for interface labels, where it would cause user fatigue and be ignored when it is necessary.</para></step>
		<step><para>We look through the uses of <wordasword>type</wordasword> to mean a general group of people or things having common characteristics. We can rewrite those. 
		</para>
			<itemizedlist>
				<listitem>
					<para>Given the text: 
						<blockquote><para>supports various relationship types, and their usage depends on the entity types being linked</para></blockquote>
					</para>
					<para>This one sentence uses <wordasword>type</wordasword> with two definitions. The first can be removed. The second 
						fits the allowed definition.</para>
					<para>Controlled version: <literal>supports various relationships, and their usage requires linked entity types</literal> </para>
				</listitem>
				<listitem>
					<para>Given the text: <blockquote><para>there are two types of admins: Org Admins and Site Admins</para></blockquote>
					</para>
					<para>The use of <wordasword>type</wordasword> is not required. 
						If the SME does not like <wordasword>level</wordasword>, we can change it to a different word
						(<wordasword>set</wordasword>, <wordasword>permissions</wordasword>). 
						Also note that we remove <wordasword>two</wordasword>. 
						It is always best to not enumerate features, to make sure you do not create a conflict in the text when a new feature is added.</para>
					<para>Controlled version: <literal>there are different admin levels: Org Admins and Site Admins</literal>
					</para>
				</listitem><listitem>
					<para>Given the text: <blockquote><para>the type of storage used by Product can have an impact</para></blockquote>
					</para>
					<para>The full text discussed SSD devices and feed caching technology. We guess that "type" meant hardware and configuration.</para>
					<para>Controlled version: <literal>The storage you use can have an impact.</literal> OR 
						<literal>your storage hardware and algorithm can impact Product</literal> OR
						<literal>storage hardware can impact Product</literal>
					</para>
				</listitem>
			</itemizedlist>
		</step>
	</procedure>
  </section>
</article>

